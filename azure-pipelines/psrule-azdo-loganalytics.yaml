name: PSRule-ADO

pool:
  vmImage: "ubuntu-latest"

variables:
  # Set to your variable group containing variables
  - group: "azdo-psrule-run"

# schedules:
#   - cron: "0 6 * * *"
#     displayName: Run every day at 6am
#     branches:
#       include:
#         - "*"

trigger:
  - main
  - users/wcamargo/*

stages:
  - stage: Run
    displayName: Run
    jobs:
      - job: Run
        displayName: Run PSRule.Rules.AzureDevOps
        steps:
          - checkout: self
            clean: true

          - task: PowerShell@2
            displayName: Register $(publishFeed) feed
            inputs:
              targetType: "inline"
              script: |
                [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

                $token = $env:SYSTEM_ACCESSTOKEN | ConvertTo-SecureString -AsPlainText -Force
                $credential = New-Object System.Management.Automation.PSCredential($env:SYSTEM_ACCESSTOKEN, $token)

                $sourceName = "PSGalleryUpstream"
                $feedLocation = "https://pkgs.dev.azure.com/tcsnlps/ssc-set/_packaging/tcsnlps-ssc-set-psmod-dev-feed/nuget/v2"                

                Register-PackageSource -Name $sourceName -ProviderName PowerShellGet -Location $feedLocation -Trusted -Credential $credential
              failOnStderr: true
              pwsh: true
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)

          - task: PowerShell@2
            displayName: Install PowerShell Modules
            inputs:
              targetType: "inline"
              script: |
                [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

                $token = $env:SYSTEM_ACCESSTOKEN | ConvertTo-SecureString -AsPlainText -Force
                $credential = New-Object System.Management.Automation.PSCredential($env:SYSTEM_ACCESSTOKEN, $token)

                # Remove existing PSRule.Rules.AzureDevOps module
                Remove-Module -Name PSRule.Rules.AzureDevOps -Force -ErrorAction SilentlyContinue

                # Install-Module -Name PSRule.Rules.AzureDevOps -Repository PSGalleryUpstream -Force -Credential $credential
                Install-Module -Name PSRule.Rules.AzureDevOps -Repository PSGalleryUpstream -Force 
                Install-Module -Name PSRule.Monitor -Scope CurrentUser -Force

                # Import the new module                 
                Import-Module PSRule.Monitor
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)

          - task: PowerShell@2
            displayName: Export Azure DevOps Data
            inputs:
              targetType: "inline"
              errorActionPreference: continue
              script: |
                $organizationName = "tcsnlpscan"
                $organizationId = "14b34e2d-2a98-4463-950d-b4d864ad3d2c"

                # Generates a new bearer token for Azure DevOps API
                $tenantId = '$(tenantId)'
                $clientId = '$(clientId)'
                $clientSecret = '$(clientSecret)'

                # Azure DevOps API Scope ID - It Never Changes - https://learn.microsoft.com/en-us/azure/devops/organizations/accounts/manage-personal-access-tokens-via-api?view=azure-devops
                $scopeId = "499b84ac-1321-427f-aa17-267ca6975798"

                $tokenResponse = Invoke-RestMethod -Uri "https://login.microsoftonline.com/$tenantId/oauth2/v2.0/token" -Method Post -Body @{
                    client_id     = $clientId
                    client_secret = $clientSecret
                    scope         = "$scopeId/.default"
                    grant_type    = "client_credentials"
                }
                $bearerToken = $tokenResponse.access_token
                Write-Host $bearerToken

                # Connect to Azure DevOps
                Connect-AzDevOps -Organization $organizationName -OrganizationId $organizationId -AccessToken $bearerToken

                Export-AzDevOpsOrganizationRuleData `
                  -OutputPath ".\Temp" -Verbose `
                  -OrganizationId $organizationId `
                  -Organization $organizationName
            env:
              PSRULE_CONVENTION_INCLUDE: "Monitor.LogAnalytics.Import"
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)

          - task: PowerShell@2
            displayName: Analyse Azure DevOps Data
            inputs:
              targetType: "inline"
              errorActionPreference: continue
              script: |
                $result = Invoke-PSRule `
                  -Module PSRule.Rules.AzureDevOps,PSRule.Monitor `
                  -InputPath '$(Build.SourcesDirectory)/Temp/' `
                  -Format Detect `
                  -Culture en
                $result | Send-PSRuleMonitorRecord -WorkspaceId '$(logAnalyticsWorkspaceId)' -SharedKey '$(logAnalyticsSharedKey)' -LogName PSRule
            env:
              PSRULE_CONVENTION_INCLUDE: "Monitor.LogAnalytics.Import"
