name: PSRule-ADO

pool: MSHosted-WorkloadsPool

variables:
  # Set to your variable group containing variables
  - group: azdo-psrule-run
  - name: reportOutputPath
    value: "$(Build.ArtifactStagingDirectory)/export"

# schedules:
#   - cron: "0 6 * * *"
#     displayName: Run every day at 6am
#     branches:
#       include:
#         - "*"

trigger:
  - main
  - users/wcamargo/*

stages:
  - stage: Run
    displayName: Run
    jobs:
      - job: Run
        displayName: Run PSRule.Rules.AzureDevOps

        steps:
          - checkout: self
            persistCredentials: true

          - task: PowerShell@2
            displayName: "Install PSGallery Powershell Modules"
            inputs:
              targetType: inline
              pwsh: true
              script: |
                Write-Host "##[group]Installing PSGallery Powershell Modules"

                $installedModule = Get-InstalledModule -Name PSRule.Rules.AzureDevOps -ErrorAction SilentlyContinue

                if ($installedModule) {
                    Uninstall-Module -Name PSRule.Rules.AzureDevOps -AllVersions
                }

                $installedPSResource = Get-InstalledPSResource -Name PSRule.Rules.AzureDevOps -ErrorAction SilentlyContinue

                if ($installedPSResource) {
                    Uninstall-PSResource -Name PSRule.Rules.AzureDevOps 
                }

                Install-Module PSRule -Scope CurrentUser -Repository PSGallery -Force -RequiredVersion 2.9.0
                Install-Module -Name Microsoft.PowerShell.PSResourceGet -Repository PSGallery -Force
                Install-Module -Name PSRule.Monitor -Repository PSGallery -Force
                Install-Module -Name Microsoft.PowerShell.SecretStore -Repository PSGallery -Force
                Install-Module -Name Microsoft.PowerShell.SecretManagement -Repository PSGallery -Force

                Write-Host "PSGallery modules installed"

                Write-Host "##[endgroup]"
          - task: PowerShell@2
            inputs:
              targetType: "filePath"
              filePath: $(System.DefaultWorkingDirectory)\test2.ps1
              arguments:
                > # Use this to avoid newline characters in multiline string
                -input1 "Hello"
                -input2 "World"
            displayName: "Print Hello World"

          - task: PowerShell@2
            displayName: "Install PSRule.Rules.AzureDevOps module"
            inputs:
              targetType: filePath
              pwsh: true
              filePath: "$(Pipeline.Workspace)/s/src/scripts/Initialize-ArtifactFeed.ps1"
              arguments: >
                -OrganizationName "$(azureDevOpsArtifactOrganizationName)"
                -ProjectName "$(azureDevOpsArtifactProjectName)" 
                -FeedName "$(azureDevOpsArtifactProjectNameFeedName)" 
                -PatUser "$(azureDevOpsArtifactPatUser)" 
                -PatToken 'dsadasd' # "$(azureDevOpsArtifactPatToken)"
                -CustomModules "PSRule.Rules.AzureDevOps"

          # - task: PowerShell@2
          #   displayName: "Install PSRule.Rules.AzureDevOps module"
          #   inputs:
          #     targetType: inline
          #     pwsh: true
          #     script: |
          #       Write-Host "##[group]Importing PowerShell Modules"

          #       Import-Module Microsoft.PowerShell.SecretStore -Force
          #       Import-Module Microsoft.PowerShell.SecretManagement  -Force
          #       Import-Module Microsoft.PowerShell.PSResourceGet -Force

          #       Write-Host "##[endgroup]"

          #       # Ensure TLS 1.2 for secure connection
          #       [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

          #       Write-Host "##[group]Prepare variables"
          #       ###########################################################################

          #       $azureDevOpsArtifactOrganizationName = "$(azureDevOpsArtifactOrganizationName)"
          #       $azureDevOpsArtifactProjectName = "$(azureDevOpsArtifactProjectName)"
          #       $azureDevOpsArtifactProjectNameFeedName = "$(azureDevOpsArtifactProjectNameFeedName)"

          #       $azureDevOpsArtifactPatUser = "$(azureDevOpsArtifactPatUser)"
          #       $azureDevOpsArtifactPatToken = "$(azureDevOpsArtifactPatToken)"

          #       # Build feed URL (NuGet v3 for PSResourceGet)
          #       $feedUrl = "https://pkgs.dev.azure.com/$azureDevOpsArtifactOrganizationName/$azureDevOpsArtifactProjectName/_packaging/$azureDevOpsArtifactProjectNameFeedName/nuget/v3/index.json"

          #       # Convert PAT to secure credential
          #       $secureToken = ConvertTo-SecureString $azureDevOpsArtifactPatToken -AsPlainText -Force
          #       $credentials = New-Object System.Management.Automation.PSCredential($azureDevOpsArtifactPatUser, $secureToken)

          #       Write-Host "##[endgroup]"

          #       ###########################################################################
          #       Write-Host "##[group]Set secret vault and secret store"

          #       $secretVaultName = "SecretVault"
          #       if ((Get-SecretVault -Name $secretVaultName -ErrorAction SilentlyContinue)){
          #         Write-Host "Vault [$secretVaultName] already exists."
          #         Write-Host "Removing Vault [$secretVaultName]."
          #         Unregister-SecretVault -Name $secretVaultName
          #       }

          #       Register-SecretVault -Name $secretVaultName -ModuleName Microsoft.PowerShell.SecretStore -DefaultVault
          #       # Set-SecretStoreConfiguration -Authentication None

          #       $password = ConvertTo-SecureString "P@ssW0rD!" -AsPlainText -Force
          #       Reset-SecretStore -Scope CurrentUser -Authentication Password -Interaction None -Password $password -PasswordTimeout -1 -Force

          #       Unlock-SecretStore -Password $password

          #       Write-Host "Setting secret"
          #       Set-Secret -Name "MyCredential" -Secret $credentials -Vault $secretVaultName

          #       $CredentialInfo = [Microsoft.PowerShell.PSResourceGet.UtilClasses.PSCredentialInfo]::new($secretVaultName, 'MyCredential')

          #       Get-SecretInfo

          #       Write-Host "##[endgroup]"

          #       ###########################################################################
          #       Write-Host "##[group]Set Azure Artifacts as PowerShell Repository"

          #       if ((Get-PSResourceRepository -Name "PowershellPSResourceRepository" -ErrorAction SilentlyContinue)){
          #         Write-Host "Removing existing repo PowershellPSResourceRepository"
          #         Unregister-PSResourceRepository -Name "PowershellPSResourceRepository"
          #       }

          #       Write-Host "Register PSResource repository"
          #       Register-PSResourceRepository -Name "PowershellPSResourceRepository" -Uri $feedUrl -Trusted -CredentialInfo $CredentialInfo

          #       Write-Host "##[endgroup]"

          #       #region Import custom module [PSRule.Rules.AzureDevOps]

          #       Write-Host "##[group]Import custom module [PSRule.Rules.AzureDevOps]"

          #       # Installs module from private artifacts
          #       Install-PSResource "PSRule.Rules.AzureDevOps" -Repository "PowershellPSResourceRepository" -Credential $credentials

          #       Write-Host "##[endgroup]"

          - task: PowerShell@2
            displayName: "Exporting Azure DevOps data"
            inputs:
              targetType: inline
              pwsh: true
              script: |
                Write-Host "##[group]Importing PowerShell Modules"

                Import-Module PSRule -Force

                Write-Host "PSGallery modules imported."

                Write-Host "##[endgroup]"

                Write-Host "##[group]Prepare variables"
                ###########################################################################

                $targetAzureDevOpsOrganizationName =  "$(targetAzureDevOpsOrganizationName)"
                $targetAzureDevOpsOrganizationID = "$(targetAzureDevOpsOrganizationID)"

                $logAnalyticsWorkspaceId = "$(logAnalyticsWorkspaceId)"
                $logAnalyticsSharedKey = "$(logAnalyticsSharedKey)"

                #TODO: Credential Info, should be moved to a Azure pwsh script and use persist credentials
                $tenantId = "$(tenantId)"
                $clientId = "$(clientId)"
                $clientSecret = "$(clientSecret)"

                $reportOutputPath = "$(Build.ArtifactStagingDirectory)/export"

                Write-Host "##[endgroup]"


                Write-Host "##[group]Import custom module [PSRule.Rules.AzureDevOps]"


                Import-Module PSRule.Rules.AzureDevOps 

                Write-Host "##[endgroup]"

                #endregion

                #region Exporting Azure DevOps Data

                Write-Host "##[group]Exporting Azure DevOps Data"                

                # Generates a new bearer token for Azure DevOps API
                Write-Host "Generates a new bearer token for Azure DevOps API"

                # Azure DevOps API Scope ID - It never changes - https://learn.microsoft.com/en-us/azure/devops/organizations/accounts/manage-personal-access-tokens-via-api?view=azure-devops
                $scopeId = "499b84ac-1321-427f-aa17-267ca6975798"

                $tokenResponse = Invoke-RestMethod -Uri "https://login.microsoftonline.com/$tenantId/oauth2/v2.0/token" -Method Post -Body @{
                    client_id     = $clientId
                    client_secret = $clientSecret
                    scope         = "$scopeId/.default"
                    grant_type    = "client_credentials"
                }
                $bearerToken = $tokenResponse.access_token

                Write-Host "Connecting to Azure DevOps"

                Connect-AzDevOps -Organization $targetAzureDevOpsOrganizationName -OrganizationId $targetAzureDevOpsOrganizationID -AccessToken $bearerToken

                # $existingOutput = Get-Item $reportOutputPath -ErrorAction SilentlyContinue

                # if ($existingOutput) {
                #     Write-Host "Removing existing output directory"
                #     Remove-Item $reportOutputPath -Force -Recurse
                # }

                Write-Host "Creating output directory"
                New-Item -ItemType Directory $reportOutputPath -Force

                Write-Host "Exporting Azure DevOps Data"
                Export-AzDevOpsOrganizationRuleData $targetAzureDevOpsOrganizationName -OrganizationId $targetAzureDevOpsOrganizationID -OutputPath $reportOutputPath

                Write-Host "##[endgroup]"

                #endregion

          - task: PowerShell@2
            displayName: "Analyzing Azure DevOps data"
            inputs:
              targetType: inline
              pwsh: true
              script: |
                Write-Host "##[group]Importing PowerShell Modules"

                Import-Module PSRule.Monitor -Force

                Write-Host "PSGallery modules imported."

                Write-Host "##[endgroup]"

                Write-Host "##[group]Prepare variables"

                $logAnalyticsWorkspaceId = "$(logAnalyticsWorkspaceId)"
                $logAnalyticsSharedKey = "$(logAnalyticsSharedKey)"

                $reportOutputPath = "$(Build.ArtifactStagingDirectory)/export"

                Write-Host "##[endgroup]"
                   
                #region Analyze Azure DevOps Data

                Write-Host "##[group]Analysing Azure DevOps Data"

                # Get all directories with files
                $outputFiles = Get-ChildItem -Path $reportOutputPath -File -Recurse | `
                    Select-Object -ExpandProperty DirectoryName -Unique | `
                    ForEach-Object { Join-Path $_ '*.json' }
                    
                Assert-PSRule -Module PSRule.Rules.AzureDevOps -InputPath $outputFiles -ErrorAction SilentlyContinue

                $result = Invoke-PSRule `
                    -Module PSRule.Rules.AzureDevOps, PSRule.Monitor `
                    -InputPath $outputFiles `
                    -Format Detect `
                    -Culture en

                Write-Host "Sending results to Log Analytics"
                $result | Send-PSRuleMonitorRecord -WorkspaceId $logAnalyticsWorkspaceId -SharedKey $logAnalyticsSharedKey -LogName PSRule    

                Write-Host "##[endgroup]"

                #endregion

          - task: PublishPipelineArtifact@1
            displayName: Publishing Azure DevOps Exports & Reports
            inputs:
              targetPath: $(Build.ArtifactStagingDirectory)/export
              artifactName: AzureDevOpsData
