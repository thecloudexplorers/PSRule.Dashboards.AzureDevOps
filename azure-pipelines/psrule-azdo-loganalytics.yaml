name: PSRule-ADO

pool: MSHosted-WorkloadsPool

variables:
  # Set to your variable group containing variables
  - group: "azdo-psrule-run"

# schedules:
#   - cron: "0 6 * * *"
#     displayName: Run every day at 6am
#     branches:
#       include:
#         - "*"

trigger:
  - main
  - users/wcamargo/*

stages:
  - stage: Run
    displayName: Run
    jobs:
      - job: Run
        displayName: Run PSRule.Rules.AzureDevOps

        steps:
          - checkout: self
            persistCredentials: true

          - task: PowerShell@2
            displayName: "Install PSGallery Powershell Modules"
            inputs:
              targetType: inline
              pwsh: true
              script: |
                Write-Host "##[group]Installing PSGallery Powershell Modules"

                $installedModule = Get-InstalledModule -Name PSRule.Rules.AzureDevOps -ErrorAction SilentlyContinue

                if ($installedModule) {
                    Uninstall-Module -Name PSRule.Rules.AzureDevOps -AllVersions
                }

                $installedPSResource = Get-InstalledPSResource -Name PSRule.Rules.AzureDevOps -ErrorAction SilentlyContinue

                if ($installedPSResource) {
                    Uninstall-PSResource -Name PSRule.Rules.AzureDevOps 
                }

                Install-Module PSRule -Scope CurrentUser -Repository PSGallery -Force -RequiredVersion 2.9.0
                Install-Module -Name Microsoft.PowerShell.PSResourceGet -Repository PSGallery -Force
                Install-Module -Name PSRule.Monitor -Repository PSGallery -Force
                Install-Module -Name Microsoft.PowerShell.SecretStore -Repository PSGallery -Force
                Install-Module -Name Microsoft.PowerShell.SecretManagement -Repository PSGallery -Force

                Write-Host "PSGallery modules installed"

                Write-Host "##[endgroup]"

          - task: PowerShell@2
            displayName: "Download & Import PSRule.Rules.AzureDevOps via PAT"
            env:
              AZDO_PAT: $(AZDO-PAT)
            inputs:
              targetType: inline
              pwsh: true
              script: |
                Write-Host "##[group]Importing PowerShell Modules"

                Import-Module PSRule -Force
                Import-Module PSRule.Monitor -Force
                Import-Module Microsoft.PowerShell.SecretStore -Force
                Import-Module Microsoft.PowerShell.SecretManagement  -Force
                Import-Module Microsoft.PowerShell.PSResourceGet -Force

                Write-Host "PSGallery modules imported."

                Write-Host "##[endgroup]"

                # Ensure TLS 1.2 for secure connection
                [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

                Write-Host "##[group]Prepare variables"
                ###########################################################################

                $azureDevOpsOrganizationName = "$(AZDO-ORGANIZATION)"
                $project = "$(project)"
                $feedName = "$(feedName)"

                # $patUser = "$(patUser)"
                $patUser = "wesley.camargo@tcsnlps.onmicrosoft.com"
                $patToken = "$(azdoArtifactPat)"

                # Build feed URL (NuGet v3 for PSResourceGet)
                $feedUrl = "https://pkgs.dev.azure.com/$azureDevOpsOrganizationName/$project/_packaging/$feedName/nuget/v3/index.json"

                # Convert PAT to secure credential
                $secureToken = ConvertTo-SecureString $patToken -AsPlainText -Force
                $credentials = New-Object System.Management.Automation.PSCredential($patUser, $secureToken)

                Write-Host "##[endgroup]"

                ###########################################################################
                Write-Host "##[group]Set secret vault and secret store"

                $secretVaultName = "SecretVault"
                if ((Get-SecretVault -Name $secretVaultName -ErrorAction SilentlyContinue)){
                  Write-Host "Vault [$secretVaultName] already exists."  
                  Write-Host "Removing Vault [$secretVaultName]."
                  Unregister-SecretVault -Name $secretVaultName
                }

                Register-SecretVault -Name $secretVaultName -ModuleName Microsoft.PowerShell.SecretStore -DefaultVault
                # Set-SecretStoreConfiguration -Authentication None

                $password = ConvertTo-SecureString "P@ssW0rD!" -AsPlainText -Force
                Reset-SecretStore -Scope CurrentUser -Authentication Password -Interaction None -Password $password -PasswordTimeout -1 -Force

                Unlock-SecretStore -Password $password

                Write-Host "Setting secret"
                Set-Secret -Name "MyCredential" -Secret $credentials -Vault $secretVaultName

                $CredentialInfo = [Microsoft.PowerShell.PSResourceGet.UtilClasses.PSCredentialInfo]::new($secretVaultName, 'MyCredential')

                Get-SecretInfo

                Write-Host "##[endgroup]"

                ###########################################################################
                Write-Host "##[group]Set Azure Artifacts as PowerShell Repository"

                if ((Get-PSResourceRepository -Name "PowershellPSResourceRepository" -ErrorAction SilentlyContinue)){
                  Write-Host "Removing existing repo PowershellPSResourceRepository"
                  Unregister-PSResourceRepository -Name "PowershellPSResourceRepository"
                }

                Write-Host "Register PSResource repository"
                Register-PSResourceRepository -Name "PowershellPSResourceRepository" -Uri $feedUrl -Trusted -CredentialInfo $CredentialInfo

                Write-Host "##[endgroup]"

                #region Import custom module [PSRule.Rules.AzureDevOps]

                Write-Host "##[group]Import custom module [PSRule.Rules.AzureDevOps]"

                # Installs module from private artifacts
                Install-PSResource "PSRule.Rules.AzureDevOps" -Repository "PowershellPSResourceRepository" -Credential $credentials

                Import-Module PSRule.Rules.AzureDevOps 

                Get-InstalledModule PSRule.Rules.AzureDevOps -ErrorAction SilentlyContinue
                Get-InstalledPSResource PSRule.Rules.AzureDevOps -ErrorAction SilentlyContinue

                Write-Host "##[endgroup]"

                #endregion

                #region Exporting Azure DevOps Data

                Write-Host "##[group]Exporting Azure DevOps Data"

                Write-Host "Exporting"

                # Generates a new bearer token for Azure DevOps API
                Write-Host "Generates a new bearer token for Azure DevOps API"


                # Azure DevOps API Scope ID - It never changes - https://learn.microsoft.com/en-us/azure/devops/organizations/accounts/manage-personal-access-tokens-via-api?view=azure-devops
                $scopeId = "499b84ac-1321-427f-aa17-267ca6975798"

                $tokenResponse = Invoke-RestMethod -Uri "https://login.microsoftonline.com/$tenantId/oauth2/v2.0/token" -Method Post -Body @{
                    client_id     = $clientId
                    client_secret = $clientSecret
                    scope         = "$scopeId/.default"
                    grant_type    = "client_credentials"
                }
                $bearerToken = $tokenResponse.access_token

                Write-Host "Connecting to Azure DevOps"

                Connect-AzDevOps -Organization $targetAdoOrganizationName -OrganizationId $targetAdoOrganizationID -AccessToken $bearerToken

                # $existingOutput = Get-Item $reportOutputPath -ErrorAction SilentlyContinue

                # if ($existingOutput) {
                #     Write-Host "Removing existing output directory"
                #     Remove-Item $reportOutputPath -Force -Recurse
                # }

                Write-Host "Creating output directory"
                New-Item -ItemType Directory $reportOutputPath -Force

                Write-Host "Exporting Azure DevOps Data"
                Export-AzDevOpsOrganizationRuleData $targetAdoOrganizationName -OrganizationId $targetAdoOrganizationID -OutputPath $reportOutputPath

                Write-Host "##[endgroup]"

                #endregion

                ###########################################################################
                Write-Host "##[group]Analysing Azure DevOps Data"

                $reportOutputPath = "$(Build.ArtifactStagingDirectory)/export"

                $outputFiles = Get-ChildItem -Path $reportOutputPath -File -Recurse | `
                    Select-Object -ExpandProperty DirectoryName -Unique | `
                    ForEach-Object { Join-Path $_ '*.json' }
                    
                # Assert-PSRule -Module PSRule.Rules.AzureDevOps -InputPath $outputFiles

                $result = Invoke-PSRule `
                    -Module PSRule.Rules.AzureDevOps, PSRule.Monitor `
                    -InputPath $outputFiles `
                    -Format Detect `
                    -Culture en

                Write-Host "Exporting analysis to Log Analytics..."
                Write-Host "Items: [$result.Count]"
                $result

                $result | Send-PSRuleMonitorRecord -WorkspaceId '$(logAnalyticsWorkspaceId)' -SharedKey '$(logAnalyticsSharedKey)' -LogName PSRule    

                Write-Host "##[endgroup]"

          - task: PublishPipelineArtifact@1
            displayName: Publishing Azure DevOps Exports & Reports
            inputs:
              targetPath: $(Build.ArtifactStagingDirectory)/export
              artifactName: AzureDevOpsData
